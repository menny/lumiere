apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.github.triplet.play'

apply plugin: 'jacoco'

jacoco {
    // https://bintray.com/bintray/jcenter/org.jacoco:org.jacoco.core
    toolVersion = "0.8.2"
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "net.evendanan.lumiere"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def keystoreFile = file("/tmp/apk.keystore")
            if (keystoreFile.exists()) {
                storeFile keystoreFile
                storePassword System.getenv("LUMIERE_KEY_STORE_FILE_PASSWORD")
                keyAlias 'lumiere'
                keyPassword System.getenv("LUMIERE_ALIAS_KEY_STORE_FILE_PASSWORD")
                println "Using '${storeFile.absolutePath}' to release APK ${path} (with alias '${keyAlias}')."
            } else {
                println "Could not find '${keystoreFile.absolutePath}' file. Can not sign release APK with release keystore! Using debug."
                initWith signingConfigs.debug
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

project.afterEvaluate {

    android.applicationVariants.all { variant ->
        def name = variant.name
        def testTaskName = "test${name.capitalize()}UnitTest"

        createJacocoReportTask(testTaskName, name)
    }
}

private void createJacocoReportTask(testTaskName, name) {
    tasks.register("${testTaskName}Coverage", JacocoReport) { task ->
        task.dependsOn tasks.named("$testTaskName")
        task.group = "Reporting"
        task.description = "Generate Jacoco coverage reports for the ${name.capitalize()} build."

        task.classDirectories = fileTree(
                dir: "${project.buildDir}/intermediates/javac/${name}",
                excludes: ['**/R.class',
                           '**/R$*.class',
                           'android/**/*.class',
                           '**/*$ViewInjector*.*',
                           '**/*$ViewBinder*.*',
                           '**/BuildConfig.*',
                           '**/*$Lambda$*.*',
                           '**/*Dagger*.*',
                           'android/**/*.*',
                           '**/*$*$*.*',
                           '**/Manifest*.*']
        )

        task.sourceDirectories = files(["${project.projectDir}/src/main/java"] + android.sourceSets[name].java.srcDirs)
        task.executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

        task.reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

play {
    track = System.getProperty('publishTrackOverride', 'alpha')
    serviceAccountEmail = System.getenv().getOrDefault('PUBLISH_APK_SERVICE_ACCOUNT_EMAIL', 'dummy@example.com')
    serviceAccountCredentials = file('/tmp/apk_upload_key.p12')
}

dependencies {
    //for interaction with AnySoftKeyboard media-insertion
    implementation fileTree(dir: 'libs', include: ['api.aar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha04'
    implementation 'androidx.core:core-ktx:1.1.0-alpha05'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha05'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.27.0-eap13'

    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.16'

    implementation 'com.github.bumptech.glide:glide:4.9.0'

    implementation 'com.giphy.sdk:core:1.0.3@aar'
    //required for giphy
    implementation 'com.google.code.gson:gson:2.8.5'

    testImplementation 'junit:junit:4.12'
}
