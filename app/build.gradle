apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.github.triplet.play'

apply plugin: 'jacoco'

jacoco {
    // https://bintray.com/bintray/jcenter/org.jacoco:org.jacoco.core
    toolVersion = "0.8.2"
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "net.evendanan.lumiere"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode rootProject.ext.versionData.versionCode
        versionName rootProject.ext.versionData.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def keystoreFile = file("/tmp/apk.keystore")
            if (keystoreFile.exists()) {
                storeFile keystoreFile
                storePassword System.getenv("LUMIERE_KEY_STORE_FILE_PASSWORD")
                keyAlias 'lumiere'
                keyPassword System.getenv("LUMIERE_ALIAS_KEY_STORE_FILE_PASSWORD")
                println "Using '${storeFile.absolutePath}' to release APK ${path} (with alias '${keyAlias}')."
            } else {
                println "Could not find '${keystoreFile.absolutePath}' file. Can not sign release APK with release keystore! Using debug."
                initWith signingConfigs.debug
            }
        }
    }

    def giphyApiKey = System.getenv().getOrDefault('GIPHY_API_KEY', 'no-key')
    if (giphyApiKey == 'no-key') {
        println("NOTICE: No API key was provided in environment variable GIPHY_API_KEY.")
    } else if (!giphyApiKey.endsWith('6uoo')) {
        println("NOTICE: API key was provided in environment variable GIPHY_API_KEY, but it does not end with '6uoo'!!!")
    }

    buildTypes {
        release {
            resValue("string", "giphy_api_key", giphyApiKey)
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            resValue("string", "giphy_api_key", giphyApiKey)
        }
    }

    testOptions {

        unitTests {
            includeAndroidResources = true

            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }
}

project.afterEvaluate {

    android.applicationVariants.all { variant ->
        def name = variant.name
        def testTaskName = "test${name.capitalize()}UnitTest"

        createJacocoReportTask(testTaskName, name)
    }
}

private void createJacocoReportTask(testTaskName, name) {
    tasks.register("${testTaskName}Coverage", JacocoReport) { task ->
        task.dependsOn tasks.named("$testTaskName")
        task.group = "Reporting"
        task.description = "Generate Jacoco coverage reports for the ${name.capitalize()} build."

        def excludes = ['**/R.class',
                        '**/R$*.class',
                        'android/**/*.class',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*$Lambda$*.*',
                        '**/*Dagger*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        '**/*$*$*.*',
                        '**/Manifest*.*']
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${name}", excludes: excludes)
        def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/${name}", excludes: excludes)
        task.classDirectories = files([kotlinClasses, javaClasses])

        task.sourceDirectories = files(["${project.projectDir}/src/main/java"] + android.sourceSets[name].java.srcDirs)
        task.executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

        task.reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

play {
    track = System.getProperty('publishTrackOverride', 'alpha')
    serviceAccountEmail = System.getenv().getOrDefault('PUBLISH_APK_SERVICE_ACCOUNT_EMAIL', 'dummy@example.com')
    serviceAccountCredentials = file('/tmp/apk_upload_key.p12')
}

dependencies {
    //for interaction with AnySoftKeyboard media-insertion
    implementation fileTree(dir: 'libs', include: ['api.aar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha04'
    implementation 'androidx.core:core-ktx:1.1.0-alpha05'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha05'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.27.0-eap13'

    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.16'

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation ('com.github.bumptech.glide:okhttp3-integration:4.9.0') {
        exclude group: 'glide-parent'
    }
    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    implementation 'com.giphy.sdk:core:1.0.3@aar'
    //required for giphy
    implementation 'com.google.code.gson:gson:2.8.5'

    testImplementation "org.robolectric:robolectric:4.2"
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.mockk:mockk:1.9'
    testImplementation 'androidx.test:core:1.1.0'
}
